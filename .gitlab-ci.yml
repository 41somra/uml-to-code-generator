# DoD Platform One CI/CD Pipeline
# Compatible with GitLab CI/CD (Party Bus)

stages:
  - security-scan
  - build
  - test
  - security-test
  - deploy-dev
  - deploy-staging
  - deploy-prod

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  IRON_BANK_IMAGE: registry1.dso.mil/ironbank/opensource/python/python38:v3.8.18

# Security scanning before build
sast:
  stage: security-scan
  image: registry1.dso.mil/ironbank/gitlab/gitlab-runner/gitlab-runner:latest
  script:
    - echo "Running SAST scan..."
    - bandit -r src/ -f json -o bandit-report.json || true
    - safety check --json --output safety-report.json || true
  artifacts:
    reports:
      sast: bandit-report.json
    paths:
      - bandit-report.json
      - safety-report.json
    expire_in: 1 week
  only:
    - merge_requests
    - main

# Container scanning
container_scanning:
  stage: security-scan
  image: registry1.dso.mil/ironbank/aquasec/trivy:latest
  script:
    - trivy config .
    - trivy fs --format json --output trivy-report.json .
  artifacts:
    reports:
      container_scanning: trivy-report.json
    expire_in: 1 week
  only:
    - merge_requests
    - main

# Build Iron Bank compliant image
build:
  stage: build
  image: registry1.dso.mil/ironbank/redhat/ubi/ubi8:8.8
  services:
    - name: registry1.dso.mil/ironbank/docker/docker-dind:20-dind
      alias: docker
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - docker build -f Dockerfile.ironbank -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  only:
    - main
    - merge_requests

# Unit tests
test:
  stage: test
  image: $IRON_BANK_IMAGE
  script:
    - pip install -r requirements.txt
    - pip install pytest pytest-cov
    - python -m pytest tests/ --cov=src/ --cov-report=xml
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    expire_in: 1 week
  only:
    - merge_requests
    - main

# DAST security testing
dast:
  stage: security-test
  image: registry1.dso.mil/ironbank/owasp/zap/zap:stable
  script:
    - echo "Running DAST scan..."
    - zap-baseline.py -t http://localhost:8080 -J zap-report.json || true
  artifacts:
    reports:
      dast: zap-report.json
    expire_in: 1 week
  only:
    - main

# Deploy to development
deploy-dev:
  stage: deploy-dev
  image: registry1.dso.mil/ironbank/kubernetes/kubectl:latest
  environment:
    name: development
    url: https://model-to-code-dev.apps.dso.mil
  script:
    - kubectl config use-context $KUBE_CONTEXT_DEV
    - envsubst < k8s/deployment.yaml | kubectl apply -f -
    - kubectl apply -f k8s/service.yaml -n model-to-code-dev
    - kubectl apply -f k8s/ingress.yaml -n model-to-code-dev
    - kubectl rollout status deployment/model-to-code-generator -n model-to-code-dev
  only:
    - main

# Deploy to staging
deploy-staging:
  stage: deploy-staging
  image: registry1.dso.mil/ironbank/kubernetes/kubectl:latest
  environment:
    name: staging
    url: https://model-to-code-staging.apps.dso.mil
  script:
    - kubectl config use-context $KUBE_CONTEXT_STAGING
    - envsubst < k8s/deployment.yaml | kubectl apply -f -
    - kubectl apply -f k8s/service.yaml -n model-to-code-staging
    - kubectl apply -f k8s/ingress.yaml -n model-to-code-staging
    - kubectl rollout status deployment/model-to-code-generator -n model-to-code-staging
  when: manual
  only:
    - main

# Deploy to production
deploy-prod:
  stage: deploy-prod
  image: registry1.dso.mil/ironbank/kubernetes/kubectl:latest
  environment:
    name: production
    url: https://model-to-code.apps.dso.mil
  script:
    - kubectl config use-context $KUBE_CONTEXT_PROD
    - envsubst < k8s/deployment.yaml | kubectl apply -f -
    - kubectl apply -f k8s/service.yaml -n model-to-code
    - kubectl apply -f k8s/ingress.yaml -n model-to-code
    - kubectl rollout status deployment/model-to-code-generator -n model-to-code
  when: manual
  only:
    - main
  rules:
    - if: '$CI_COMMIT_TAG'