"""
Base Generator Class for Model-to-Code Generator
Provides common functionality for all code generators
"""

from abc import ABC, abstractmethod
from typing import Dict, List, Any
from ..models.class_model import ClassDiagram


class BaseGenerator(ABC):
    """Base class for all code generators"""
    
    def __init__(self):
        pass
    
    @abstractmethod
    def generate(self, diagram: ClassDiagram) -> Dict[str, str]:
        """
        Generate code from a class diagram
        
        Args:
            diagram: ClassDiagram object containing the model
            
        Returns:
            Dictionary mapping file paths to file contents
        """
        pass
    
    def _escape_string(self, text: str) -> str:
        """Escape special characters in strings"""
        return text.replace('"', '\\"').replace('\n', '\\n')
    
    def _capitalize_first(self, text: str) -> str:
        """Capitalize first letter of string"""
        return text[0].upper() + text[1:] if text else ""
    
    def _snake_case(self, text: str) -> str:
        """Convert CamelCase to snake_case"""
        import re
        s1 = re.sub('(.)([A-Z][a-z]+)', r'\1_\2', text)
        return re.sub('([a-z0-9])([A-Z])', r'\1_\2', s1).lower()
    
    def _kebab_case(self, text: str) -> str:
        """Convert CamelCase to kebab-case"""
        return self._snake_case(text).replace('_', '-')
    
    def _generate_file_header(self, filename: str, description: str = "") -> str:
        """Generate standard file header"""
        return f'''/**
 * {filename}
 * {description}
 * Generated by Model-to-Code Generator
 * Air Force Kessel Run - Mission Critical Systems
 */

'''